name: ci

on:
  push:
    paths:
      - 'backend/**'
    branches:
      - main

jobs:

  artifact-build:
    runs-on: ubuntu-latest
    name: run tests and build

    steps:
      - name: checkout backend directory
        uses: actions/checkout@v4
        with:
          sparse-checkout: backend

      - name: setup jdk 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'gradle'

      - name: grant execute permission for gradlew
        run: chmod +x gradlew

      - name: cache gradle dependencies
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: gradle-${{ runner.os }}-

      - name: run unit tests
        run: ./gradlew test --verbose=plain

#      - name: run integration tests with jacoco
#        run: ./gradlew intetest

      - name: build backend artifact
        run: ./gradlew build -x test --verbose=plain

#      - name: upload jacoco coverage report
#        uses: actions/upload-artifact@v4
#        with:
#          name: backend-jacoco-report
#          path: ./app/build/reports/jacoco/test/html

#    --- required sonarcloud ---
#      - name: run sonarqube code analysis
#        env:
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#        run: ./gradlew sonar -Dsonar.login=${{ secrest.SONAR_TOKEN }}
#
#      - name: fetch sonarqube quality gate result
#        env:
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
#        run: |
#          echo "fetching sonarqube quality gate status"
#          curl -u $SONAR_TOKEN: "$SONAR_HOST_URL/api/qualitygates/project_status?projectKey=ohmygoods_backend" | jq .

#      - name: upload sonarqube report
#        uses: actions/upload-artifact@v4
#        with:
#          name: backend-sonarqube-report
#          path: ./app/build/reports/sonar/

      - name: upload backend artifact
        uses: actions/upload-artifact@v4
        with:
          name: ohmygoods-backend-app
          path: ./app/build/libs/*.jar

  docker-build:
    name: build docker image and push it to github container registry
    runs-on: ubuntu-latest
    needs: artifact-build

    steps:
      - name: download backend artifact
        uses: actions/download-artifact@v4
        with:
          name: ohmygoods-backend-app

      - name: login to ghcr
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: build and push backend docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./app/Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository }}/backend-app:latest