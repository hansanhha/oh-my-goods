name: ci

on:
  push:
    branches:
      - cicd

permissions:
  id-token: write
  contents: read

jobs:

  image-build-push-ecr:
    runs-on: ubuntu-latest

    steps:
      - name: checkout repository
        uses: actions/checkout@v4

      - name: setup jdk 21
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "21"
          cache: "gradle"

      - name: grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: cache gradle dependencies
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: gradle-${{ runner.os }}-

      - name: run unit tests
        run: ./gradlew test --console=verbose

#      - name: run integration tests with jacoco
#        run: ./gradlew intetest

#      - name: upload jacoco coverage report
#        uses: actions/upload-artifact@v4
#        with:
#          name: backend-jacoco-report
#          path: ./app/build/reports/jacoco/test/html

#    --- required sonarcloud ---
#      - name: run sonarqube code analysis
#        env:
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#        run: ./gradlew sonar -Dsonar.login=${{ secrest.SONAR_TOKEN }}
#
#      - name: fetch sonarqube quality gate result
#        env:
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
#        run: |
#          echo "fetching sonarqube quality gate status"
#          curl -u $SONAR_TOKEN: "$SONAR_HOST_URL/api/qualitygates/project_status?projectKey=ohmygoods_backend" | jq .

#      - name: upload sonarqube report
#        uses: actions/upload-artifact@v4
#        with:
#          name: backend-sonarqube-report
#          path: ./app/build/reports/sonar/

      - name: build artifact
        run: ./gradlew build -x test --console=verbose
      
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials/@v4
        with:
          role-to-assume: arn:aws:iam::533267200761:role/ohmygoods-ecr
          aws-region: ap-northeast-2

      - name: login to amazon ecr
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: build, tag, and push docker image to amazon ecr
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ohmygoods
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG -f ./app/Dockerfile-ci ./app 
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG